# Drop unnecessary columns, including constants
drops <- c("user_name","raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "kurtosis_yaw_belt", "skewness_yaw_belt", "kurtosis_yaw_dumbbell","skewness_yaw_dumbbell","kurtosis_yaw_forearm","skewness_yaw_forearm","amplitude_yaw_belt","amplitude_yaw_dumbbell","amplitude_yaw_forearm")
training<-training[,!(names(training) %in% drops)]
testing<-testing[,!(names(testing) %in% drops)]
# Convert columns to numeric
cols<-ncol(training)-1
for(i in 1:cols) {
training[,i] <- as.numeric(training[,i])
}
cols<-ncol(testing)-1
for(i in 1:cols) {
testing[,i] <- as.numeric(testing[,i])
}
View(testing)
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
}
nas
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
if(nas<20) {
print(i)
}
}
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
if(nas==20) {
print(i)
}
}
View(testing)
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
if(nas==20) {
print(i)
print(names(testing[,i]))
}
}
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
if(nas==20) {
print(i)
names(testing[,i])
}
}
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
dropIndex<-0
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
remove(dropIndex)
dropIndex
dropIndex<-null
dropIndex=null
dropIndex=NULL
dropIndex<_NULL
dropIndex<-NULL
for(i in 1:cols) {
nas<-sum(!is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
dropIndex<-NULL
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
testing[,-dropIndex]
training[,-dropIndex]
testing<-testing[,-dropIndex]
View(testing)
testing$classe
training$classe
testing$classe
remove(testing)
testingUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
temp <- tempfile()
download.file(testingUrl,temp, method="curl")
if(!exists("testing")){
testing <- read.csv(temp, header=TRUE, sep=",", na.strings=c("NA", "#DIV/0!"))
}
unlink(temp)
testing$classe
drops <- c("user_name","raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "kurtosis_yaw_belt", "skewness_yaw_belt", "kurtosis_yaw_dumbbell","skewness_yaw_dumbbell","kurtosis_yaw_forearm","skewness_yaw_forearm","amplitude_yaw_belt","amplitude_yaw_dumbbell","amplitude_yaw_forearm")
training<-training[,!(names(training) %in% drops)]
testing<-testing[,!(names(testing) %in% drops)]
# Convert columns to numeric
cols<-ncol(training)-1
for(i in 1:cols) {
training[,i] <- as.numeric(training[,i])
}
cols<-ncol(testing)-1
for(i in 1:cols) {
testing[,i] <- as.numeric(testing[,i])
}
# Impute missing values with 0
training[is.na(training)] <- 0
testing[is.na(testing)] <- 0
#Remove columns that have values of NA for all rows in testing set
dropIndex<-NULL
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
testing<-testing[,-dropIndex]
training<-training[,-dropIndex]
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
library(caret)
rm(list = setdiff(ls(), lsf.str()))
trainingUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
temp <- tempfile()
download.file(trainingUrl,temp, method="curl")
if(!exists("training")){
training <- read.csv(temp, header=TRUE, sep=",", na.strings=c("NA", "#DIV/0!"))
}
unlink(temp)
testingUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
temp <- tempfile()
download.file(testingUrl,temp, method="curl")
if(!exists("testing")){
testing <- read.csv(temp, header=TRUE, sep=",", na.strings=c("NA", "#DIV/0!"))
}
unlink(temp)
drops <- c("user_name","raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp"
#, "kurtosis_yaw_belt", "skewness_yaw_belt", "kurtosis_yaw_dumbbell","skewness_yaw_dumbbell","kurtosis_yaw_forearm","skewness_yaw_forearm","amplitude_yaw_belt","amplitude_yaw_dumbbell","amplitude_yaw_forearm"
)
training<-training[,!(names(training) %in% drops)]
testing<-testing[,!(names(testing) %in% drops)]
dropIndex<-NULL
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
cols<-ncol(training)-1
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
testing<-testing[,-dropIndex]
training<-training[,-dropIndex]
View(testing)
View(training)
for(i in 1:cols) {
training[,i] <- as.numeric(training[,i])
}
for(i in 1:cols) {
testing[,i] <- as.numeric(testing[,i])
}
cols<-ncol(training)-1
for(i in 1:cols) {
training[,i] <- as.numeric(training[,i])
}
cols<-ncol(testing)-1
for(i in 1:cols) {
testing[,i] <- as.numeric(testing[,i])
}
View(testing)
View(training)
preProc<- preProcess(training[,1:cols], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, training)
preProc<- preProcess(training[,1:cols], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, training)
cor <- abs(cor(training[,-ncol(testing)-1]))
View(cor)
pairs(training)
y<-which(names(training) == "classe")
cor <- abs(cor(training[,-y]))
View(cor)
?cor
cor(training[,-y],training[y])
cor <- order(cor, decreasing = TRUE)
cor
cor <- abs(cor(training[,-y]),training[y])
cor <- abs(cor(training[,-y]),training[y])
cor <- abs(cor(training[,-y],training[y]))
corOrder <- order(cor, decreasing = TRUE)
order(cor, decreasing = TRUE)
names(training)[corOrder]
abs(cor(training[,-y],training[y]))
preProc<- preProcess(training[,2:55], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, training)
trainPC<-predict(preProc, training[,2:55])
modelFit<- train(training$classe ~ .,method="glm", data=trainPC)
testPC<-predict(preProc, testing[,2:55])
confusionMatrix(testing$classe,predict(modelFit, testPC))
confusionMatrix(testing$program_id,predict(modelFit, testPC))
confusionMatrix(testing$classe,predict(modelFit, testPC))
predict(modelFit, testPC)
abs(cor(training[,-y],training[y]))
predict(preProc, testing[,2:55])
confusionMatrix(testing$classe,predict(modelFit, testPC))
predict(modelFit, testPC)
training$classe
library(caret)
rm(list = setdiff(ls(), lsf.str()))
trainingUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
temp <- tempfile()
download.file(trainingUrl,temp, method="curl")
if(!exists("training")){
training <- read.csv(temp, header=TRUE, sep=",", na.strings=c("NA", "#DIV/0!"))
}
unlink(temp)
testingUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
temp <- tempfile()
download.file(testingUrl,temp, method="curl")
if(!exists("testing")){
testing <- read.csv(temp, header=TRUE, sep=",", na.strings=c("NA", "#DIV/0!"))
}
unlink(temp)
drops <- c("user_name","raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp")
training<-training[,!(names(training) %in% drops)]
testing<-testing[,!(names(testing) %in% drops)]
#Remove columns that have values of NA for all rows in testing set
dropIndex<-NULL
cols<-ncol(training)-1
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
testing<-testing[,-dropIndex]
training<-training[,-dropIndex]
cols<-ncol(training)-1
for(i in 1:cols) {
training[,i] <- as.numeric(training[,i])
}
training$classe
cols<-ncol(training)-1
for(i in 1:cols) {
training[,i] <- as.numeric(training[,i])
}
cols<-ncol(testing)-1
for(i in 1:cols) {
testing[,i] <- as.numeric(testing[,i])
}
training$classe
preProc<- preProcess(training[,2:55], outcome=classe, method="pca", threshold=0.9)
training$classe
modelFit<- train(training$classe ~ .,method="glm", data=trainPC)
preProc<- preProcess(training[,2:55], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, training[,2:55])
modelFit<- train(training$classe ~ .,method="glm", data=trainPC)
modelFit<- train(training$classe ~ .,method="glm", data=trainPC)
modelFit<- train(training$classe ~ .,method="glm", data=trainPC)
training$classe
testPC<-predict(preProc, testing[,2:55])
confusionMatrix(testing$classe,predict(modelFit, testPC))
modelFit<- train(training$classe ~ .,method="glm", data=trainPC)
?train
modelFit<- train(training$classe ~ .,method="class", data=trainPC)
modelFit<- train(training$classe ~ .,method="random-forest", data=trainPC)
modelFit<- train(training$classe ~ .,method="rf", data=trainPC)
modelFit<- train(training$classe ~ .,method="rf", ntree=100,data=trainPC)
?train
modelFit<- train(training$classe ~ .,method="rf",ntree=100,trControl=fitControl, data=trainPC)
fitControl = trainControl(method = "oob")
modelFit<- train(training$classe ~ .,method="rf",ntree=100,trControl=fitControl, data=trainPC)
testPC<-predict(preProc, testing[,2:55])
confusionMatrix(testing$classe,predict(modelFit, testPC))
training$classe
testing$classe
predict(modelFit, testPC)
confusionMatrix(testing$program_id,predict(modelFit, testPC))
confusionMatrix(testing,predict(modelFit, testPC))
confusionMatrix(testing$classe,predict(modelFit, testPC))
predict(modelFit, testPC)
predict(modelFit, testPC)
predict(modelFit, testing)
predict(modelFit, testPC)
confusionMatrix(testing$classe,predict(modelFit, testPC))
confusionMatrix(training$classe,predict(modelFit, testPC))
confusionMatrix(training$classe,predict(modelFit, trainPC))
cor <- abs(cor(training[,-y],training[y]))
y<-which(names(training) == "classe")
cor <- abs(cor(training[,-y],training[y]))
y<-which(names(training) == "classe")
cor <- abs(cor(training[,-y],training[y]))
training[y]
training[,-y]
abs(cor(training[,-y],training[y]))
cor <- abs(cor(training[,-y],as.numeric(training[y])))
as.numeric(training[y])
training[y]
as.character(training[y])
training[y]
as.character(training[y])
cor <- abs(cor(training[,-y],as.numeric(as.character(training[y])))
abs(cor(training[,-y],as.numeric(as.character(training[y])))
abs(cor(training[,-y],as.numeric(as.character(training[y])))
abs(cor(training[,-y],as.numeric(as.character(training[y]))))
cor <- abs(cor(training[,-y],as.numeric(training[y])))
y<-which(names(training) == "classe")
preProc<- preProcess(training[,-y], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, training[,-y])
fitControl = trainControl(method = "oob")
modelFit<- train(training$classe ~ .,method="rf",ntree=100,trControl=fitControl, data=trainPC)
testPC<-predict(preProc, testing[,-y])
confusionMatrix(training$classe,predict(modelFit, trainPC))
confusionMatrix(testing$classe,predict(modelFit, testPC))
inTrain = createDataPartition(training$classe, p = 0.75, list = F)
data_train = training[inTrain,]
data_test = training[-inTrain,]
preProc<- preProcess(data_train[,-y], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, data_train[,-y])
fitControl = trainControl(method = "oob")
modelFit<- train(data_train$classe ~ .,method="rf",ntree=100,trControl=fitControl, data=trainPC)
testPC<-predict(preProc, data_test[,-y])
confusionMatrix(data_test$classe,predict(modelFit, testPC))
?preProcess
predict(modelFit, testing)
testProblemsPC<-predict(preProc, testing[,-y])
predict(modelFit, testing)
predict(modelFit, testProblemsPC)
View(testing)
View(training)
library(caret)
rm(list = setdiff(ls(), lsf.str()))
trainingUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
temp <- tempfile()
download.file(trainingUrl,temp, method="curl")
if(!exists("training")){
training <- read.csv(temp, header=TRUE, sep=",", na.strings=c("NA", "#DIV/0!"))
}
unlink(temp)
testingUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
temp <- tempfile()
download.file(testingUrl,temp, method="curl")
if(!exists("testing")){
testing <- read.csv(temp, header=TRUE, sep=",", na.strings=c("NA", "#DIV/0!"))
}
unlink(temp)
drops <- c("X","user_name","raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp")
training<-training[,!(names(training) %in% drops)]
testing<-testing[,!(names(testing) %in% drops)]
#Remove columns that have values of NA for all rows in testing set
dropIndex<-NULL
cols<-ncol(training)-1
for(i in 1:cols) {
nas<-sum(is.na(testing[,i]))
if(nas==20) {
print(i)
dropIndex<-append(dropIndex, i)
}
}
testing<-testing[,-dropIndex]
training<-training[,-dropIndex]
# Convert columns to numeric
cols<-ncol(training)-1
for(i in 1:cols) {
training[,i] <- as.numeric(training[,i])
}
cols<-ncol(testing)-1
for(i in 1:cols) {
testing[,i] <- as.numeric(testing[,i])
}
y<-which(names(training) == "classe")
inTrain = createDataPartition(training$classe, p = 0.75, list = F)
data_train = training[inTrain,]
data_test = training[-inTrain,]
preProc<- preProcess(data_train[,-y], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, data_train[,-y])
testPC<-predict(preProc, data_test[,-y])
fitControl = trainControl(method = "oob")
modelFit<- train(data_train$classe ~ .,method="rf",ntree=100,trControl=fitControl, data=trainPC)
confusionMatrix(data_test$classe,predict(modelFit, testPC))
testProblemsPC<-predict(preProc, testing[,-y])
predict(modelFit, testProblemsPC)
predictions<-predict(modelFit, testProblemsPC)
testing[,y]
results<-cbind(testing[,y],predictions)
View(results)
testing[,y]
problems<-testing[,y]
problems<-testing$problem_id
testing$problem_id
names(testing$problem_id)
testProblemsPC<-predict(preProc, testing[,-y])
predictions<-predict(modelFit, testProblemsPC)
problems<-testing$problem_id
results<-cbind(problems,predictions)
View(results)
testProblemsPC<-predict(preProc, testing[,-y])
predictions<-predict(modelFit, testProblemsPC)
problem_id<-testing$problem_id
results<-cbind(problems,predictions)
View(results)
results<-cbind(problem_id,predictions)
View(results)
predictions<-predict(modelFit, testProblemsPC)
problem_id<-testing$problem_id
results<-cbind(problem_id,predictions)
View(results)
predictions
?cbind
results<-as.data.frame(cbind(problem_id,predictions), stringsAsFactors=TRUE)
View(results)
predictions
results<-as.data.frame(cbind(problem_id,predictions), stringsAsFactors=FALSE)
View(results)
results<-as.data.frame(problem_id,predictions)
predictions
problem_id
results<-as.data.frame(problem_id,predictions)
?as.data.frame
results<-data.frame(problem_id,predictions)
View(results)
?confusionMatrix
confusionMatrix(data_test$classe,predict(modelFit, testPC))
?createDataPartition
View(inTrain)
y<-which(names(training) == "classe")
inTrain = createDataPartition(training$classe, p = 0.75)
data_train = training[inTrain,]
data_test = training[-inTrain,]
y<-which(names(training) == "classe")
inTrain = createDataPartition(training$classe, p = 0.75)
data_train = training[inTrain,]
inTrain = createDataPartition(training$classe, p = 0.75, list=FALSE)
data_train = training[inTrain,]
data_test = training[-inTrain,]
preProc<- preProcess(data_train[,-y], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, data_train[,-y])
testPC<-predict(preProc, data_test[,-y])
fitControl = trainControl(method = "oob")
modelFit<- train(data_train$classe ~ .,method="rf",ntree=100,trControl=fitControl, data=trainPC)
confusionMatrix(data_test$classe,predict(modelFit, testPC))
print(results)
rep("A", 20)
predictions
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictions)
getwd()
preProc<- preProcess(data_train[,-y], outcome=classe, method="pca", threshold=0.8)
trainPC<-predict(preProc, data_train[,-y])
testPC<-predict(preProc, data_test[,-y])
fitControl = trainControl(method = "oob")
modelFit<- train(data_train$classe ~ .,method="rf",ntree=200,trControl=fitControl, data=trainPC)
confusionMatrix(data_test$classe,predict(modelFit, testPC))
View(testing)
testProblemsPC<-predict(preProc, testing[,-y])
predictions<-predict(modelFit, testProblemsPC)
problem_id<-testing$problem_id
results<-data.frame(problem_id,predictions)
print(results)
setwd("/users/scottwallace/DataScience/datasciencecoursera/PracticalMachineLearning/CourseProject/CourseraPracticalMachineLearning")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictions)
print(results)
print(results)
predictions
preProc<- preProcess(data_train[,-y], outcome=classe, method="pca", threshold=0.9)
trainPC<-predict(preProc, data_train[,-y])
testPC<-predict(preProc, data_test[,-y])
fitControl = trainControl(method = "oob")
modelFit<- train(data_train$classe ~ .,method="rf",ntree=200,trControl=fitControl, data=trainPC)
testProblemsPC<-predict(preProc, testing[,-y])
predictions<-predict(modelFit, testProblemsPC)
problem_id<-testing$problem_id
results<-data.frame(problem_id,predictions)
print(results)
print(results)
